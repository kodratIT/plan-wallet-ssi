@startuml 03-seq-didcomm-credential-issuance
!theme plain
skinparam backgroundColor #FEFEFE
skinparam sequenceMessageAlign center

title DIDComm Credential Issuance Flow\n**Aries Issue Credential Protocol 2.0 (RFC 0453)**

actor "User\n(Holder)" as User
participant "Mobile\nWallet UI" as WalletUI
participant "DIDComm\nHandler" as DIDCommHandler
participant "Message\nQueue" as MsgQueue
participant "DIDComm\nMediator" as Mediator
participant "Key\nManager" as KeyMgr
participant "DID\nResolver" as DIDResolver
participant "Credential\nStore" as CredStore
participant "Push\nNotification\nService" as PushSvc
participant "Issuer\nAgent" as Issuer

== Prerequisite: Connection Already Established ==

note over User, Issuer
  **Context:**
  Connection established via SD-06 (DIDComm Connection Protocol)
  
  Both parties have:
  - Each other's pairwise DIDs
  - DID documents with keys
  - Service endpoints (mediator)
  - Encrypted messaging capability
end note

== 1. Issuer Sends Credential Offer ==

Issuer -> Issuer: Decide to issue credential\nto holder
activate Issuer

Issuer -> Issuer: Retrieve connection with holder
Issuer -> Issuer: Get holder's DID & service endpoint

Issuer -> Issuer: Create offer-credential message

note right of Issuer
  **Offer Credential Message (Aries RFC 0453):**
  {
    "@type": "https://didcomm.org/issue-credential/2.0/offer-credential",
    "@id": "uuid-offer-123",
    "~thread": {},
    "goal_code": "issue-credential",
    "comment": "University Degree Certificate offer",
    "credential_preview": {
      "@type": "https://didcomm.org/issue-credential/2.0/credential-preview",
      "attributes": [{
        "name": "degree_type",
        "value": "Bachelor of Science"
      }, {
        "name": "major",
        "value": "Computer Science"
      }, {
        "name": "graduation_date",
        "value": "2023-06-15"
      }, {
        "name": "gpa",
        "value": "3.85"
      }]
    },
    "formats": [{
      "attach_id": "format-1",
      "format": "aries/ld-proof-vc-detail@v1.0"
    }],
    "offers~attach": [{
      "@id": "format-1",
      "mime-type": "application/json",
      "data": {
        "json": {
          "@context": ["https://www.w3.org/2018/credentials/v1"],
          "type": ["VerifiableCredential", "UniversityDegreeCredential"],
          "issuer": "did:ion:issuer123...",
          "issuanceDate": "2024-01-15T12:00:00Z",
          "credentialSchema": {
            "id": "https://example.edu/schemas/degree",
            "type": "JsonSchemaValidator2018"
          }
        }
      }
    }]
  }
end note

Issuer -> Issuer: Set message type: offer-credential
Issuer -> Issuer: Generate message ID
Issuer -> Issuer: Include credential preview (attributes)
Issuer -> Issuer: Include credential format details
Issuer -> Issuer: Attach credential schema

== 2. Pack Message (Authcrypt) ==

Issuer -> Issuer: Get holder's public key\nfrom DID document

Issuer -> Issuer: Pack message with authcrypt
note right of Issuer
  **Authcrypt:**
  - Sender authenticated (issuer)
  - Recipient encrypted (holder)
  - ECDH key agreement
  - ChaCha20-Poly1305 encryption
  - JWE format
end note

Issuer -> Issuer: Create JWE envelope

== 3. Send via Mediator ==

Issuer -> Mediator: POST to holder's mediator endpoint
activate Mediator

note right of Issuer
  **POST Request:**
  POST https://mediator.com/inbox-abc123
  Content-Type: application/didcomm-encrypted+json
  
  Body: <JWE_encrypted_offer>
end note

Mediator -> Mediator: Receive encrypted message
Mediator -> Mediator: Store in holder's inbox
Mediator -> Mediator: Message ID: msg-456

Issuer --> Issuer: Mark offer as sent
deactivate Issuer

== 4. Push Notification ==

Mediator -> PushSvc: Send push notification
activate PushSvc

note right of Mediator
  **Push Notification Payload:**
  {
    "title": "New Credential Offer",
    "body": "University Degree Certificate",
    "data": {
      "type": "credential-offer",
      "connection_id": "conn-123"
    }
  }
end note

PushSvc -> WalletUI: Deliver push notification
activate WalletUI
deactivate PushSvc

Mediator --> Mediator: Notification sent
deactivate Mediator

== 5. User Opens App ==

WalletUI -> User: 📬 New Credential Offer\nUniversity Degree Certificate
note left of User
  User may open immediately
  or later when convenient
end note

User -> WalletUI: Tap notification

WalletUI -> DIDCommHandler: checkNewMessages()
activate DIDCommHandler

== 6. Message Pickup from Mediator ==

DIDCommHandler -> Mediator: Batch message pickup (RFC 0212)
activate Mediator

note right of DIDCommHandler
  **Delivery Request:**
  {
    "@type": "https://didcomm.org/messagepickup/2.0/delivery-request",
    "@id": "uuid-pickup-789",
    "limit": 10
  }
end note

Mediator -> Mediator: Retrieve messages from inbox
Mediator --> DIDCommHandler: Batch of messages
deactivate Mediator

note right of Mediator
  **Delivery Response:**
  {
    "@type": ".../messagepickup/2.0/delivery",
    "message_count": 1,
    "messages": [{
      "message": "<encrypted_offer>"
    }]
  }
end note

DIDCommHandler -> DIDCommHandler: Extract messages from batch

== 7. Unpack & Decrypt Message ==

loop For each message
  DIDCommHandler -> KeyMgr: unpackMessage(encrypted_message)
  activate KeyMgr
  
  KeyMgr -> KeyMgr: Identify recipient key (kid)
  KeyMgr -> KeyMgr: Get our private key from Keystore
  KeyMgr -> KeyMgr: ECDH key agreement (decrypt shared secret)
  KeyMgr -> KeyMgr: Decrypt JWE (ChaCha20-Poly1305)
  KeyMgr -> KeyMgr: Verify authentication tag
  KeyMgr -> KeyMgr: Extract sender DID (authenticated)
  
  KeyMgr --> DIDCommHandler: Plaintext message + sender DID
  deactivate KeyMgr
  
  DIDCommHandler -> DIDCommHandler: Parse message JSON
  DIDCommHandler -> DIDCommHandler: Check @type field
end

== 8. Parse Credential Offer ==

DIDCommHandler -> DIDCommHandler: Type: offer-credential
DIDCommHandler -> DIDCommHandler: Validate sender is from\nestablished connection

alt Sender not in connections
  DIDCommHandler -> WalletUI: Unknown sender, reject
  WalletUI -> User: Suspicious message blocked
  deactivate DIDCommHandler
  deactivate WalletUI
  [<-- User
end

DIDCommHandler -> DIDCommHandler: Extract offer details:
DIDCommHandler -> DIDCommHandler: - Message ID
DIDCommHandler -> DIDCommHandler: - Thread ID
DIDCommHandler -> DIDCommHandler: - Comment/description
DIDCommHandler -> DIDCommHandler: - Credential preview (attributes)
DIDCommHandler -> DIDCommHandler: - Credential format
DIDCommHandler -> DIDCommHandler: - Attachments (schema, etc.)

note right of DIDCommHandler
  **Extracted Data:**
  - Type: UniversityDegreeCredential
  - Issuer: University XYZ
  - Attributes:
    • degree_type: Bachelor of Science
    • major: Computer Science
    • graduation_date: 2023-06-15
    • gpa: 3.85
  - Format: JSON-LD with LD Proofs
end note

DIDCommHandler -> DIDResolver: Resolve issuer DID
activate DIDResolver
DIDResolver -> DIDResolver: Query DID method resolver
DIDResolver --> DIDCommHandler: Issuer DID document
deactivate DIDResolver

DIDCommHandler -> DIDCommHandler: Extract issuer display info:\n- Name\n- Logo

DIDCommHandler -> MsgQueue: Store offer message
activate MsgQueue
MsgQueue -> MsgQueue: Store in pending offers
MsgQueue --> DIDCommHandler: Stored
deactivate MsgQueue

DIDCommHandler --> WalletUI: Offer parsed successfully
deactivate DIDCommHandler

== 9. Display Offer to User ==

WalletUI -> User: 🎓 Credential Offer\n\nFrom: University XYZ\nType: University Degree Certificate\n\nAttributes:\n• Degree: Bachelor of Science\n• Major: Computer Science\n• Graduation: 2023-06-15\n• GPA: 3.85\n\nAccept this credential?

note left of User
  **User Decision:**
  Review credential details
  - Is issuer legitimate?
  - Are attributes correct?
  - Do I want this credential?
  
  Options:
  - Accept
  - Decline
  - Review later
end note

User -> User: Review credential preview
User -> WalletUI: Accept credential

alt User declines
  WalletUI -> DIDCommHandler: rejectOffer(offer_id)
  activate DIDCommHandler
  DIDCommHandler -> DIDCommHandler: Create problem-report message
  DIDCommHandler -> DIDCommHandler: Pack & send to issuer
  DIDCommHandler --> WalletUI: Offer declined
  deactivate DIDCommHandler
  WalletUI -> User: Offer declined
  deactivate WalletUI
  [<-- User
end

== 10. Send Credential Request ==

WalletUI -> DIDCommHandler: acceptOffer(offer_id)
activate DIDCommHandler

DIDCommHandler -> DIDCommHandler: Retrieve offer from queue
DIDCommHandler -> DIDCommHandler: Build request-credential message

note right of DIDCommHandler
  **Request Credential Message:**
  {
    "@type": "https://didcomm.org/issue-credential/2.0/request-credential",
    "@id": "uuid-request-456",
    "~thread": {
      "thid": "uuid-offer-123"  // Links to offer
    },
    "comment": "Requesting degree certificate",
    "formats": [{
      "attach_id": "format-1",
      "format": "aries/ld-proof-vc-detail@v1.0"
    }],
    "requests~attach": [{
      "@id": "format-1",
      "mime-type": "application/json",
      "data": {
        "json": {
          "@context": ["https://www.w3.org/2018/credentials/v1"],
          "type": ["VerifiableCredential", "UniversityDegreeCredential"],
          "credentialSubject": {
            "id": "did:peer:2.Ez6LSb..."  // Holder DID
          }
        }
      }
    }]
  }
end note

DIDCommHandler -> DIDCommHandler: Set message type: request-credential
DIDCommHandler -> DIDCommHandler: Set thread ID (from offer)
DIDCommHandler -> DIDCommHandler: Include holder DID
DIDCommHandler -> DIDCommHandler: Specify requested format

DIDCommHandler -> KeyMgr: authcryptMessage(request, issuerKey, myKey)
activate KeyMgr

KeyMgr -> KeyMgr: Get issuer's public key (from DID doc)
KeyMgr -> KeyMgr: Get my private key
KeyMgr -> KeyMgr: ECDH key agreement
KeyMgr -> KeyMgr: Encrypt & authenticate
KeyMgr -> KeyMgr: Create JWE

KeyMgr --> DIDCommHandler: Packed message
deactivate KeyMgr

DIDCommHandler -> DIDCommHandler: Get issuer's service endpoint

DIDCommHandler -> Issuer: POST to issuer endpoint\n(encrypted request)
activate Issuer

WalletUI -> User: Requesting credential...

Issuer -> Issuer: Receive encrypted request
Issuer -> Issuer: Unpack message (authcrypt)
Issuer -> Issuer: Validate thread ID matches offer
Issuer -> Issuer: Validate holder DID

alt Invalid request
  Issuer -> Issuer: Create problem-report
  Issuer --> DIDCommHandler: Error: Invalid request
  DIDCommHandler --> WalletUI: Request failed
  WalletUI -> User: Error: Request rejected by issuer
  deactivate Issuer
  deactivate DIDCommHandler
  deactivate WalletUI
  [<-- User
end

Issuer --> DIDCommHandler: 202 Accepted
DIDCommHandler --> WalletUI: Request sent
deactivate DIDCommHandler

WalletUI -> User: Waiting for credential...

== 11. Issuer Generates Credential ==

Issuer -> Issuer: Retrieve student data from\nissuer system
Issuer -> Issuer: Build Verifiable Credential

note right of Issuer
  **Verifiable Credential (JSON-LD):**
  {
    "@context": [
      "https://www.w3.org/2018/credentials/v1",
      "https://www.w3.org/2018/credentials/examples/v1"
    ],
    "type": ["VerifiableCredential", "UniversityDegreeCredential"],
    "issuer": "did:ion:issuer123...",
    "issuanceDate": "2024-01-15T12:00:00Z",
    "expirationDate": "2029-01-15T12:00:00Z",
    "credentialSubject": {
      "id": "did:peer:2.Ez6LSb...",  // Holder
      "degree": {
        "type": "BachelorDegree",
        "name": "Bachelor of Science in Computer Science"
      },
      "gpa": "3.85",
      "graduationDate": "2023-06-15"
    },
    "credentialStatus": {
      "type": "StatusList2021Entry",
      "statusPurpose": "revocation",
      "statusListIndex": "54321",
      "statusListCredential": "https://university.edu/status/1"
    }
  }
end note

Issuer -> Issuer: Set credentialSubject.id = holder DID
Issuer -> Issuer: Set issuanceDate
Issuer -> Issuer: Set expirationDate
Issuer -> Issuer: Add revocation status info

Issuer -> Issuer: Sign credential with LD Proof

note right of Issuer
  **Linked Data Proof:**
  Using Ed25519Signature2020 suite
  
  1. Canonicalize credential (URDNA2015)
  2. Hash canonicalized document
  3. Sign hash with issuer private key
  4. Attach proof to credential
  
  "proof": {
    "type": "Ed25519Signature2020",
    "created": "2024-01-15T12:00:00Z",
    "verificationMethod": "did:ion:issuer123...#key-1",
    "proofPurpose": "assertionMethod",
    "proofValue": "z5w3..."
  }
end note

Issuer -> Issuer: Get issuer private key
Issuer -> Issuer: Canonicalize credential (URDNA2015)
Issuer -> Issuer: Create proof (Ed25519)
Issuer -> Issuer: Attach proof to credential

Issuer -> Issuer: Validate signed credential

== 12. Send Credential ==

Issuer -> Issuer: Create issue-credential message

note right of Issuer
  **Issue Credential Message:**
  {
    "@type": "https://didcomm.org/issue-credential/2.0/issue-credential",
    "@id": "uuid-issue-789",
    "~thread": {
      "thid": "uuid-offer-123"  // Original thread
    },
    "comment": "Your degree certificate",
    "formats": [{
      "attach_id": "credential-1",
      "format": "aries/ld-proof-vc@v1.0"
    }],
    "credentials~attach": [{
      "@id": "credential-1",
      "mime-type": "application/ld+json",
      "data": {
        "json": <signed_credential>
      }
    }]
  }
end note

Issuer -> Issuer: Set message type: issue-credential
Issuer -> Issuer: Set thread ID (same as offer)
Issuer -> Issuer: Attach signed credential
Issuer -> Issuer: Pack message (authcrypt)

Issuer -> Mediator: POST to holder's mediator
activate Mediator

Mediator -> Mediator: Store in holder's inbox
Mediator -> PushSvc: Send push notification
activate PushSvc
PushSvc -> WalletUI: Push: Credential received
deactivate PushSvc

Mediator --> Issuer: 202 Accepted
deactivate Mediator

Issuer -> Issuer: Update protocol state: issued
deactivate Issuer

== 13. Wallet Receives Credential ==

alt User already has app open
  WalletUI -> WalletUI: Auto-check for new messages
else User opens app from push
  User -> WalletUI: Tap notification
end

WalletUI -> DIDCommHandler: checkNewMessages()
activate DIDCommHandler

DIDCommHandler -> Mediator: Batch pickup
activate Mediator
Mediator --> DIDCommHandler: Messages (including credential)
deactivate Mediator

DIDCommHandler -> KeyMgr: Unpack message
activate KeyMgr
KeyMgr -> KeyMgr: Decrypt & verify
KeyMgr --> DIDCommHandler: Plaintext message
deactivate KeyMgr

DIDCommHandler -> DIDCommHandler: Parse message
DIDCommHandler -> DIDCommHandler: Type: issue-credential
DIDCommHandler -> DIDCommHandler: Validate thread ID
DIDCommHandler -> DIDCommHandler: Extract credential from attachment

== 14. Validate Credential ==

DIDCommHandler -> DIDCommHandler: Extract credential JSON
DIDCommHandler -> DIDCommHandler: Parse credential structure

note right of DIDCommHandler
  **Validation Steps:**
  1. Structure validation
  2. @context validation
  3. Type validation
  4. Issuer DID resolution
  5. Signature verification (LD Proof)
  6. Subject DID check (is it me?)
  7. Dates check (issuance, expiration)
  8. Schema validation
  9. Revocation status (optional)
end note

DIDCommHandler -> DIDCommHandler: Check @context
DIDCommHandler -> DIDCommHandler: Check type
DIDCommHandler -> DIDCommHandler: Extract issuer DID

DIDCommHandler -> DIDResolver: Resolve issuer DID
activate DIDResolver
DIDResolver --> DIDCommHandler: Issuer DID document + public key
deactivate DIDResolver

DIDCommHandler -> DIDCommHandler: Extract proof from credential
DIDCommHandler -> DIDCommHandler: Get verificationMethod key

DIDCommHandler -> DIDCommHandler: Verify LD Proof signature
note right of DIDCommHandler
  **Signature Verification:**
  1. Remove proof from credential
  2. Canonicalize (URDNA2015)
  3. Hash canonicalized document
  4. Verify signature with issuer public key
  5. Check proofPurpose = assertionMethod
  6. Check created date
end note

DIDCommHandler -> DIDCommHandler: Canonicalize credential (without proof)
DIDCommHandler -> DIDCommHandler: Verify signature with issuer public key

alt Invalid signature
  DIDCommHandler --> WalletUI: Validation failed
  WalletUI -> User: ❌ Invalid credential signature
  deactivate DIDCommHandler
  deactivate WalletUI
  [<-- User
end

DIDCommHandler -> DIDCommHandler: Validate credentialSubject.id\nmatches my DID

alt Subject DID doesn't match
  DIDCommHandler --> WalletUI: Credential not for me
  WalletUI -> User: ❌ Credential not for this wallet
  deactivate DIDCommHandler
  deactivate WalletUI
  [<-- User
end

DIDCommHandler -> DIDCommHandler: Check issuanceDate <= now
DIDCommHandler -> DIDCommHandler: Check expirationDate > now

alt Expired
  DIDCommHandler --> WalletUI: Credential expired
  WalletUI -> User: ❌ Credential has expired
  deactivate DIDCommHandler
  deactivate WalletUI
  [<-- User
end

DIDCommHandler -> DIDCommHandler: (Optional) Check revocation status

DIDCommHandler -> DIDCommHandler: All validations passed ✓

== 15. Store Credential ==

DIDCommHandler -> CredStore: storeCredential(credential)
activate CredStore

CredStore -> CredStore: Generate credential ID
CredStore -> CredStore: Extract metadata:\n- Type, issuer, dates, attributes
CredStore -> CredStore: Encrypt credential JSON
CredStore -> CredStore: Store in database
CredStore -> CredStore: Index for search

CredStore --> DIDCommHandler: Credential stored (ID)
deactivate CredStore

== 16. Send Acknowledgment ==

DIDCommHandler -> DIDCommHandler: Create ack message

note right of DIDCommHandler
  **Acknowledgment Message:**
  {
    "@type": "https://didcomm.org/notification/1.0/ack",
    "@id": "uuid-ack-012",
    "~thread": {
      "thid": "uuid-offer-123"
    },
    "status": "OK"
  }
end note

DIDCommHandler -> DIDCommHandler: Set thread ID
DIDCommHandler -> DIDCommHandler: Pack message (authcrypt)

DIDCommHandler -> Issuer: POST to issuer\n(encrypted ack)
activate Issuer

Issuer -> Issuer: Receive ack
Issuer -> Issuer: Unpack message
Issuer -> Issuer: Update protocol state: complete
Issuer -> Issuer: Log successful issuance

Issuer --> DIDCommHandler: 202 Accepted
deactivate Issuer

DIDCommHandler --> WalletUI: Credential accepted & stored
deactivate DIDCommHandler

== 17. Display Success ==

WalletUI -> WalletUI: Update credentials list
WalletUI -> User: ✓ Credential Received!\n\n🎓 University Degree Certificate\nFrom: University XYZ\nIssued: 2024-01-15\n\nView credential?

note left of User
  **Credential Received:**
  ✓ Validated & stored
  ✓ Can now present to verifiers
  ✓ Can view anytime
  ✓ Protected by encryption
end note

User -> WalletUI: View credential

WalletUI -> User: Display credential:\n\n[Logo] University XYZ\n\n🎓 Bachelor of Science\nComputer Science\n\nGraduated: 2023-06-15\nGPA: 3.85\n\nIssuer: did:ion:issuer123...\nStatus: Valid ✓

deactivate WalletUI

note over User, Issuer
  **DIDComm Credential Issuance Complete!**
  
  **Protocol Flow:**
  1. Issuer sends offer (via mediator)
  2. Push notification to holder
  3. Holder reviews & accepts
  4. Holder sends request
  5. Issuer generates & signs credential
  6. Issuer sends credential (via mediator)
  7. Holder validates & stores
  8. Holder sends acknowledgment
  
  **Security Features:**
  ✓ End-to-end encryption (authcrypt)
  ✓ Mediated messaging (availability)
  ✓ Digital signatures (LD Proof)
  ✓ DID-based authentication
  ✓ Revocation support
  
  **Advantages vs OpenID4VCI:**
  ✓ Persistent connection (reusable)
  ✓ Push notifications
  ✓ Bidirectional communication
  ✓ Rich protocol states
  ✓ Better for ongoing relationships
  
  **Next Steps:**
  - Holder can present credential to verifiers
  - Issuer can update/revoke if needed
  - Connection remains for future issuances
end note

@enduml
