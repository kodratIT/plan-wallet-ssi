@startuml 16-seq-credential-revoked
!theme plain
skinparam backgroundColor #FEFEFE
skinparam sequenceMessageAlign center

title Credential Revocation Detection & Handling\n**Background Checks & Pre-Presentation Validation**

actor "User" as User
participant "Background\nJob\n(WorkManager)" as BgJob
participant "Revocation\nChecker" as RevChecker
participant "Credential\nStore" as CredStore
participant "Wallet UI" as WalletUI
participant "Status List\n2021 Service" as StatusList
participant "AnonCreds\nRevocation\nRegistry" as RevReg
participant "Notification\nService" as NotifSvc
participant "Verifier" as Verifier

== Scenario A: Scheduled Background Check ==

note over User, RevReg
  **Context:**
  Wallet periodically checks if credentials
  have been revoked by issuers.
  
  Two main revocation methods:
  1. Status List 2021 (W3C standard)
  2. AnonCreds Revocation Registry (Indy)
end note

BgJob -> BgJob: Timer triggers\n(every 24 hours)
activate BgJob

note right of BgJob
  **Background Job Schedule:**
  - Android: WorkManager periodic task
  - iOS: BackgroundTasks framework
  - Frequency: Every 24 hours
  - Network: WiFi preferred
  - Battery: Only when charging (optional)
end note

BgJob -> RevChecker: checkAllCredentials()
activate RevChecker

RevChecker -> CredStore: getAllCredentials()
activate CredStore

CredStore -> CredStore: SELECT * FROM Credentials\nWHERE revocation_status != 'revoked'
CredStore --> RevChecker: List of credentials (15 credentials)
deactivate CredStore

RevChecker -> RevChecker: Filter revocable credentials\n(have credentialStatus field)

note right of RevChecker
  **Revocation Support:**
  Only credentials with credentialStatus
  can be checked for revocation
  
  credentialStatus types:
  - StatusList2021Entry (W3C)
  - CredentialStatusList2017 (older)
  - RevocationList2020
  - AnonCreds revocation registry
end note

RevChecker -> RevChecker: Found 12 revocable credentials

== Check Each Credential (Loop) ==

loop For each credential
  RevChecker -> RevChecker: Extract credentialStatus info
  RevChecker -> RevChecker: Determine revocation method
  
  alt Method: Status List 2021 (most common)
    
    note right of RevChecker
      **Status List 2021:**
      credentialStatus: {
        "type": "StatusList2021Entry",
        "statusPurpose": "revocation",
        "statusListIndex": "12345",
        "statusListCredential": "https://issuer.com/status/1"
      }
      
      - statusListIndex: bit position in list
      - statusListCredential: URL to compressed bitstring
    end note
    
    RevChecker -> RevChecker: Extract statusListCredential URL
    RevChecker -> RevChecker: Extract statusListIndex (e.g., 12345)
    
    RevChecker -> RevChecker: Check cache for status list
    
    alt Status list cached (< 1 hour old)
      RevChecker -> RevChecker: Use cached bitstring
    else Not cached or expired
      RevChecker -> StatusList: GET statusListCredential URL
      activate StatusList
      
      StatusList -> StatusList: Retrieve Status List 2021 VC
      
      note right of StatusList
        **Status List 2021 Credential:**
        {
          "@context": [...],
          "type": ["VerifiableCredential", "StatusList2021Credential"],
          "issuer": "did:ion:issuer...",
          "issued": "2024-01-15T00:00:00Z",
          "credentialSubject": {
            "type": "StatusList2021",
            "statusPurpose": "revocation",
            "encodedList": "H4sIAAAAAAAA..."  // gzip + base64
          }
        }
        
        encodedList is compressed bitstring:
        - 1 bit per credential
        - 1 = revoked
        - 0 = valid
      end note
      
      StatusList --> RevChecker: Status List 2021 VC
      deactivate StatusList
      
      RevChecker -> RevChecker: Verify status list signature
      RevChecker -> RevChecker: Decode encodedList (base64)
      RevChecker -> RevChecker: Decompress (gzip)
      RevChecker -> RevChecker: Get bitstring
      
      RevChecker -> RevChecker: Cache bitstring (1 hour TTL)
    end
    
    RevChecker -> RevChecker: Check bit at statusListIndex (12345)
    RevChecker -> RevChecker: Extract bit value
    
    alt Bit = 1 (REVOKED)
      RevChecker -> RevChecker: Credential is REVOKED! üö®
      RevChecker -> RevChecker: Previous status: valid
      RevChecker -> RevChecker: Status changed! ‚ö†Ô∏è
      
      RevChecker -> CredStore: updateCredentialStatus(id, "revoked")
      activate CredStore
      CredStore -> CredStore: UPDATE Credentials\nSET revocation_status = 'revoked',\nrevoked_at = NOW()
      CredStore --> RevChecker: Updated
      deactivate CredStore
      
      RevChecker -> RevChecker: Add to notification queue
      
    else Bit = 0 (Valid)
      RevChecker -> RevChecker: Credential still valid ‚úì
    end
    
  else Method: AnonCreds Revocation Registry
    
    note right of RevChecker
      **AnonCreds Revocation:**
      Used with Hyperledger Indy credentials
      
      rev_reg_id: "RevRegId123..."
      cred_rev_id: "54321"
      
      Cryptographic accumulator approach
    end note
    
    RevChecker -> RevChecker: Extract rev_reg_id
    RevChecker -> RevChecker: Extract cred_rev_id
    
    RevChecker -> RevReg: Query revocation registry\n(Indy ledger)
    activate RevReg
    
    RevReg -> RevReg: Get current accumulator state
    RevReg -> RevReg: Check if cred_rev_id in revoked list
    
    RevReg --> RevChecker: Revocation status
    deactivate RevReg
    
    alt Credential revoked
      RevChecker -> RevChecker: Credential is REVOKED
      RevChecker -> CredStore: updateCredentialStatus(id, "revoked")
      activate CredStore
      CredStore --> RevChecker: Updated
      deactivate CredStore
      RevChecker -> RevChecker: Add to notification queue
    else Credential valid
      RevChecker -> RevChecker: Still valid ‚úì
    end
    
  else Method: REST API status check
    
    note right of RevChecker
      **REST API Check:**
      Some issuers provide REST endpoint
      
      GET https://issuer.com/credentials/{id}/status
    end note
    
    RevChecker -> RevChecker: Extract status endpoint URL
    RevChecker -> StatusList: GET /credentials/{id}/status
    activate StatusList
    StatusList --> RevChecker: {"status": "revoked"}
    deactivate StatusList
    
    alt Status is revoked
      RevChecker -> CredStore: updateCredentialStatus(id, "revoked")
      activate CredStore
      CredStore --> RevChecker: Updated
      deactivate CredStore
      RevChecker -> RevChecker: Add to notification queue
    end
  end
  
  RevChecker -> RevChecker: Move to next credential
end

== Send Notifications for Revoked Credentials ==

RevChecker -> RevChecker: Check notification queue
RevChecker -> RevChecker: Found 2 revoked credentials

alt Revoked credentials found
  loop For each revoked credential
    RevChecker -> NotifSvc: sendNotification(credential)
    activate NotifSvc
    
    note right of NotifSvc
      **Push Notification:**
      Title: "Credential Revoked"
      Body: "Your University Degree Certificate has been revoked"
      Priority: High
      Sound: Alert
    end note
    
    NotifSvc -> WalletUI: Push notification
    activate WalletUI
    deactivate NotifSvc
    
    WalletUI -> User: üö® Credential Revoked\nUniversity Degree Certificate
    note left of User
      User sees notification
      on lock screen
    end note
    deactivate WalletUI
  end
  
  RevChecker -> RevChecker: Log revocation events
  RevChecker -> RevChecker: Store in audit log
end

RevChecker -> RevChecker: Background check complete
RevChecker --> BgJob: Check completed (2 revoked, 10 valid)
deactivate RevChecker

BgJob -> BgJob: Schedule next run (24h)
deactivate BgJob

== Scenario B: Pre-Presentation Real-Time Check ==

note over User, Verifier
  **Context:**
  User is about to present credential to verifier.
  Wallet does real-time check to ensure
  credential hasn't been revoked since last check.
end note

User -> WalletUI: Present credential to verifier
activate WalletUI

WalletUI -> WalletUI: User scans verifier QR
WalletUI -> WalletUI: Presentation request received
WalletUI -> WalletUI: User selects credentials

WalletUI -> RevChecker: checkRevocationStatus(credentials, real_time=true)
activate RevChecker

note right of RevChecker
  **Real-Time Check:**
  More urgent than background check
  - No caching (always fetch fresh)
  - Immediate result needed
  - Blocks presentation if revoked
end note

loop For each credential to present
  RevChecker -> RevChecker: Extract credentialStatus
  
  alt Status List 2021
    RevChecker -> StatusList: GET statusListCredential (no cache)
    activate StatusList
    StatusList --> RevChecker: Fresh status list
    deactivate StatusList
    
    RevChecker -> RevChecker: Decompress & check bit
    
    alt Credential REVOKED
      RevChecker -> RevChecker: Credential revoked! üö®
      RevChecker -> RevChecker: CANNOT present
      
      RevChecker -> CredStore: updateCredentialStatus(id, "revoked")
      activate CredStore
      CredStore --> RevChecker: Updated
      deactivate CredStore
      
      RevChecker --> WalletUI: Credential revoked
      
      WalletUI -> User: ‚ùå Cannot Present Credential\n\nYour University Degree Certificate\nhas been REVOKED by the issuer.\n\nReason: Status check failed\nRevoked: Just now\n\nPlease contact issuer:\nUniversity XYZ\nsupport@university.edu
      
      note left of User
        **User Actions:**
        - Contact issuer
        - Understand why revoked
        - Request re-issuance (if applicable)
        - Cannot use credential anymore
      end note
      
      deactivate WalletUI
      deactivate RevChecker
      [<-- User
      
    else Credential VALID
      RevChecker -> RevChecker: Credential valid ‚úì
      RevChecker -> RevChecker: Safe to present
    end
    
  else AnonCreds Registry
    RevChecker -> RevReg: Query (real-time)
    activate RevReg
    RevReg --> RevChecker: Status
    deactivate RevReg
    
    alt Revoked
      RevChecker --> WalletUI: Credential revoked
      WalletUI -> User: ‚ùå Cannot present (revoked)
      deactivate WalletUI
      deactivate RevChecker
      [<-- User
    else Valid
      RevChecker -> RevChecker: Valid ‚úì
    end
  end
end

RevChecker --> WalletUI: All credentials valid ‚úì
deactivate RevChecker

WalletUI -> WalletUI: Continue with presentation
WalletUI -> User: Generating proof...
WalletUI -> Verifier: Send presentation
activate Verifier

note right of WalletUI
  **Include Revocation Proof (AnonCreds):**
  For AnonCreds credentials,
  presentation includes ZKP that
  credential is NOT revoked
  
  Verifier will check this proof
end note

Verifier -> Verifier: Verify presentation
Verifier -> Verifier: Check revocation proof (if AnonCreds)
Verifier -> Verifier: Verification successful ‚úì

Verifier --> WalletUI: Proof accepted
deactivate Verifier

WalletUI -> User: ‚úì Presentation successful
deactivate WalletUI

== Scenario C: User Opens Revoked Credential ==

note over User, CredStore
  **Context:**
  User opens app and views a credential
  that was revoked during background check
end note

User -> WalletUI: Open wallet app
activate WalletUI

WalletUI -> WalletUI: Load credentials list
WalletUI -> CredStore: getAllCredentials()
activate CredStore

CredStore -> CredStore: Fetch credentials with status
CredStore --> WalletUI: Credentials list
deactivate CredStore

WalletUI -> User: Display credentials:\n\n‚úì Driver's License (Valid)\n‚úì Employee ID (Valid)\n‚ùå University Degree (REVOKED)\n‚úì Health Insurance (Valid)

note left of User
  **UI Indicators:**
  - Valid: Green checkmark ‚úì
  - Revoked: Red X ‚ùå
  - Expired: Gray icon
  - Badge: "REVOKED" label
end note

User -> WalletUI: Tap on revoked credential

WalletUI -> User: üö® Credential Revoked\n\n[University Logo]\nUniversity Degree Certificate\n\nStatus: REVOKED ‚ùå\nRevoked: 2024-01-15 08:30 AM\nIssuer: University XYZ\n\n‚ö†Ô∏è This credential is no longer valid.\nYou cannot use it for verification.\n\nContact issuer:\nsupport@university.edu\n+1-555-0123\n\nActions:\n[Delete Credential]\n[Contact Issuer]\n[View Details]

User -> User: Review revocation info

alt User contacts issuer
  User -> WalletUI: Tap "Contact Issuer"
  WalletUI -> WalletUI: Open email client /\nbrowser
  deactivate WalletUI
  User -> User: Contact issuer support
  
else User deletes credential
  User -> WalletUI: Tap "Delete Credential"
  WalletUI -> User: Confirm deletion?
  User -> WalletUI: Confirm
  
  WalletUI -> CredStore: deleteCredential(id)
  activate CredStore
  CredStore -> CredStore: DELETE FROM Credentials WHERE id = ?
  CredStore --> WalletUI: Deleted
  deactivate CredStore
  
  WalletUI -> User: Credential deleted
  deactivate WalletUI
end

== Scenario D: Bulk Revocation (Multiple Credentials) ==

note over User, StatusList
  **Context:**
  Issuer revokes multiple credentials at once
  (e.g., data breach, batch error)
end note

BgJob -> BgJob: Scheduled check runs
activate BgJob

BgJob -> RevChecker: checkAllCredentials()
activate RevChecker

RevChecker -> StatusList: Fetch status lists
activate StatusList
StatusList --> RevChecker: Updated status lists
deactivate StatusList

RevChecker -> RevChecker: Check credentials
RevChecker -> RevChecker: Detected 5 revoked credentials!\n(same issuer)

note right of RevChecker
  **Bulk Revocation Detected:**
  - All from University XYZ
  - All revoked at same time
  - Likely batch revocation
end note

RevChecker -> CredStore: Update all 5 credentials
activate CredStore
CredStore -> CredStore: Batch UPDATE
CredStore --> RevChecker: Updated
deactivate CredStore

RevChecker -> RevChecker: Group by issuer for notification

RevChecker -> NotifSvc: sendGroupedNotification(issuer, count)
activate NotifSvc

note right of NotifSvc
  **Grouped Notification:**
  Instead of 5 separate notifications,
  send one grouped notification
  
  "5 credentials from University XYZ
  have been revoked"
end note

NotifSvc -> WalletUI: Push: Bulk revocation alert
activate WalletUI
deactivate NotifSvc

WalletUI -> User: üö® 5 Credentials Revoked\nFrom: University XYZ\n\nTap to view details

User -> WalletUI: Tap notification

WalletUI -> User: Revoked Credentials:\n\n‚ùå University Degree (2021)\n‚ùå Student ID\n‚ùå Library Card\n‚ùå Transcript\n‚ùå Enrollment Certificate\n\nAll from: University XYZ\nRevoked: Today at 9:00 AM\n\nContact university immediately:\nsupport@university.edu

deactivate WalletUI
deactivate RevChecker
deactivate BgJob

note over User, RevReg
  **Revocation Flow Complete!**
  
  **Three Check Scenarios:**
  1. Background scheduled checks (every 24h)
  2. Pre-presentation real-time checks
  3. User views credential (shows status)
  
  **Revocation Methods Supported:**
  ‚úì Status List 2021 (W3C standard)
    - Compressed bitstring
    - 1 bit per credential
    - Efficient for large scale
  ‚úì AnonCreds Revocation Registry
    - Cryptographic accumulator
    - ZKP non-revocation proofs
    - Privacy-preserving
  ‚úì REST API status endpoints
    - Direct issuer queries
    - Real-time updates
  
  **User Experience:**
  ‚úì Push notifications for revocations
  ‚úì Clear UI indicators (‚úì/‚ùå)
  ‚úì Blocks invalid presentations
  ‚úì Grouped notifications (bulk)
  ‚úì Contact issuer options
  
  **Security Benefits:**
  ‚úì Prevents use of revoked credentials
  ‚úì Real-time validation before presentation
  ‚úì Audit trail of revocation checks
  ‚úì User awareness (notifications)
  
  **Performance Optimizations:**
  ‚úì Caching status lists (1 hour)
  ‚úì Background jobs (WiFi + charging)
  ‚úì Batch processing
  ‚úì Grouped notifications
  
  **Privacy Considerations:**
  ‚úì AnonCreds: ZKP non-revocation proofs
  ‚úì Status List 2021: No correlation
  ‚úì Local checks (no tracking)
end note

@enduml
