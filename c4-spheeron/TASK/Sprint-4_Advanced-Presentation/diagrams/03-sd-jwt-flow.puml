@startuml SD-JWT-Flow
!define C4Container(e_alias, e_label, e_techn) participant "e_label" as e_alias <<e_techn>>
skinparam sequenceMessageAlign center
title SD-JWT Selective Disclosure Flow (US-4.1)

actor User as user
participant "Wallet UI" as ui
participant "SD-JWT Service" as sdjwt
participant "Disclosure Selector" as selector
participant "Presentation Service" as present
participant "Verifier" as verifier
database "Credential Store" as store

== Phase 1: Receive SD-JWT Credential ==

user -> ui: Accept credential offer
activate ui
ui -> sdjwt: parseSDJWT(credential)
activate sdjwt

note right of sdjwt
  SD-JWT Structure:
  JWT~Disclosure1~Disclosure2~...~KB-JWT
  
  JWT: Issuer-signed claims
  Disclosures: Salted claim values
  KB-JWT: Key Binding (optional)
end note

sdjwt -> sdjwt: validateStructure()
sdjwt -> sdjwt: verifyIssuerSignature()
sdjwt -> sdjwt: extractDisclosures()

sdjwt --> ui: Parsed SD-JWT
deactivate sdjwt

ui -> store: saveCredential(sdJwt)
activate store
store --> ui: saved
deactivate store
deactivate ui

== Phase 2: Presentation Request ==

verifier -> ui: Presentation request + Definition
activate ui

ui -> present: processPresentationRequest(request)
activate present

present -> present: parsePresentationDefinition()
present -> store: findMatchingCredentials()
activate store
store --> present: matching SD-JWT credentials
deactivate store

present --> ui: Required: [name, age, address]
deactivate present

== Phase 3: Selective Disclosure ==

ui -> selector: showDisclosureSelector(cred, required)
activate selector

note right of selector
  Disclosure Options:
  [X] name (required)
  [X] age (required)
  [ ] address (optional)
  [ ] email (optional)
  [ ] phone (optional)
  
  User can:
  - Select optional claims
  - View privacy impact
  - Preview what will be shared
end note

selector -> user: Display disclosure options
activate user

user -> selector: Select: [name, age]

selector -> selector: validateRequired()

alt Required claims missing
    selector -> user: Error: Must select required
    user -> selector: Add required claims
end

selector -> selector: calculatePrivacyImpact()
selector -> user: Show preview
note left of user
  You will share:
  - Name
  - Age
  
  Hidden:
  - Address
  - Email
  - Phone
end note

user -> selector: Confirm disclosure
deactivate user

selector --> ui: Selected: [name, age]
deactivate selector

== Phase 4: Generate Presentation ==

ui -> sdjwt: createPresentation(cred, selected, verifier, nonce)
activate sdjwt

sdjwt -> sdjwt: filterDisclosures(selected)

note right of sdjwt
  Only include disclosures for:
  - name
  - age
  
  Exclude:
  - address
  - email
  - phone
end note

sdjwt -> sdjwt: generateKeyBinding(holder, verifier, nonce)

note right of sdjwt
  Key Binding JWT:
  - iat: timestamp
  - aud: verifierDID
  - nonce: nonce
  - sd_hash: hash(sd_jwt)
  
  Signed by holder
end note

sdjwt -> sdjwt: assemblePresentation()

note right of sdjwt
  Final Presentation:
  JWT~Disclosure_name~Disclosure_age~KB-JWT
  
  Only selected disclosures included
end note

sdjwt --> ui: SD-JWT Presentation
deactivate sdjwt

== Phase 5: Submit Presentation ==

ui -> present: submitPresentation(presentation, verifier)
activate present

present -> verifier: POST /presentation
activate verifier

verifier -> verifier: verifyIssuerSignature()
verifier -> verifier: verifyKeyBinding(holderDID)
verifier -> verifier: validateNonce()
verifier -> verifier: extractRevealedClaims()

note right of verifier
  Verifier sees only:
  - name: "John Doe"
  - age: 30
  
  Verifier does NOT see:
  - address
  - email
  - phone
end note

verifier --> present: Presentation accepted
deactivate verifier

present --> ui: Success
deactivate present

== Phase 6: Log Activity ==

ui -> store: logPresentationActivity(data)
activate store
store --> ui: logged
deactivate store

ui --> user: Success: Credential shared
note left of user
  Shared:
  - name
  - age
  
  Private:
  - address
  - email
  - phone
end note

deactivate ui

@enduml
