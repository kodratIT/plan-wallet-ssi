@startuml BBS-ZKP-Flow
skinparam sequenceMessageAlign center
title BBS+ Zero-Knowledge Proof Flow (US-4.2)

actor User as user
participant "Wallet UI" as ui
participant "BBS+ Service" as bbs
participant "Predicate Proof UI" as predicate
participant "Presentation Service" as present
participant "Verifier" as verifier
database "Credential Store" as store

== Phase 1: Receive BBS+ Credential ==

user -> ui: Accept credential offer
activate ui
ui -> bbs: parseBBSCredential(credential)
activate bbs

note right of bbs
  BBS+ Credential Structure:
  - credentialSubject:
    * name: "John Doe"
    * birthDate: "1990-05-15"
    * address: "123 Main St"
    * email: "john@example.com"
  
  - proof:
    * type: "BbsBlsSignature2020"
    * proofValue: "..."
    * verificationMethod: "did:example:issuer#key-1"
end note

bbs -> bbs: verifyBBSSignature()
bbs -> bbs: validateCredentialStructure()

bbs --> ui: Verified BBS+ credential
deactivate bbs

ui -> store: saveCredential(bbsCredential)
activate store
store --> ui: saved
deactivate store
deactivate ui

== Phase 2: Predicate Proof Request ==

verifier -> ui: Request: Prove age > 18
activate ui

note right of verifier
  Presentation Definition:
  - input_descriptors:
    * constraints:
      - fields:
        + path: credentialSubject.birthDate
        + filter:
          - type: string
          - format: date
          - predicate:
            * type: age_over
            * value: 18
end note

ui -> present: processPresentationRequest(request)
activate present

present -> present: detectPredicateRequest()
present -> store: findBBSCredentials()
activate store
store --> present: BBS+ credentials with birthDate
deactivate store

present --> ui: Predicate proof required: age > 18
deactivate present

== Phase 3: User Consent for Predicate ==

ui -> predicate: showPredicateProofUI(age > 18)
activate predicate

note right of predicate
  Age Verification Screen
  
  Verifier requests:
  - Prove you are over 18
  
  What will be shared:
  [X] Proof that age > 18
  
  What will NOT be shared:
  [ ] Your exact age
  [ ] Your birth date
  
  Privacy Level: HIGH (5/5)
end note

predicate -> user: Display predicate explanation
activate user

user -> predicate: How does this work?

predicate -> user: Show ZKP explanation
note left of user
  Zero-Knowledge Proof:
  
  - Cryptographic proof that
    you are over 18
  
  - Verifier sees: 
    TRUE (age > 18)
  
  - Verifier does NOT see:
    Your actual age
  
  - Uses BBS+ signature
    technology
end note

user -> predicate: Approve predicate proof
deactivate user

predicate --> ui: User approved
deactivate predicate

== Phase 4: Generate Derived Proof ==

ui -> bbs: generateDerivedProof(cred, predicate, nonce)
activate bbs

bbs -> bbs: calculateAge(birthDate)

note right of bbs
  Calculate age from birth date:
  - birthDate: 1990-05-15
  - today: 2024-10-15
  - calculated age: 34 years
  
  Evaluate predicate:
  - age > 18
  - result: TRUE
end note

bbs -> bbs: evaluatePredicate(age, ">", 18)
bbs -> bbs: createRevealedStatements()

note right of bbs
  Revealed Statements:
  
  Revealed:
  - name: "John Doe"
  - predicate_age_over_18: TRUE
  
  Hidden:
  - birthDate: [HIDDEN]
  - address: [HIDDEN]
  - email: [HIDDEN]
end note

bbs -> bbs: generateDerivedProof()

note right of bbs
  BBS+ Derived Proof Process:
  1. Blind unrevealed attributes
  2. Generate predicate proof
  3. Create new signature
  4. Bind to holder & verifier
  5. Add nonce for freshness
  
  Output: Cryptographic proof
  without revealing exact values
end note

bbs --> ui: Derived proof with predicate
deactivate bbs

== Phase 5: Submit Zero-Knowledge Proof ==

ui -> present: submitPresentation(proof, verifier)
activate present

present -> verifier: POST /presentation + BBS+ Proof
activate verifier

verifier -> verifier: verifyDerivedProof()
verifier -> verifier: verifyIssuerPublicKey()
verifier -> verifier: validatePredicateProof()

note right of verifier
  Verifier validates:
  1. Issuer signature (via public key)
  2. Proof structure
  3. Nonce freshness
  4. Predicate result: age > 18 = TRUE
  
  Verifier receives:
  - name: "John Doe"
  - age_over_18: TRUE
  
  Verifier does NOT receive:
  - birth date
  - exact age
  - other attributes
end note

verifier --> present: User verified as 18+
deactivate verifier

present --> ui: Verification successful
deactivate present

== Phase 6: Log Activity ==

ui -> store: logPresentationActivity(data)
activate store
store --> ui: logged
deactivate store

ui -> user: Age verified successfully
activate user
note left of user
  Age verified!
  
  Verifier confirmed:
  - You are over 18
  
  Your privacy protected:
  - Exact age NOT shared
  - Birth date NOT shared
end note
deactivate user

deactivate ui

note over user, verifier
  Zero-Knowledge Proof Benefits:
  - Privacy: Exact values hidden
  - Selective: Choose what to prove
  - Trustless: Cryptographically verified
  - Unlinkable: Different proofs each time
  - Minimal disclosure: Only prove what's needed
end note

@enduml
