@startuml
title Credential Manifest Flow (US-2.1)
caption Complete Credential Issuance dengan Credential Manifest Protocol

actor User
participant "Wallet UI" as UI
participant "Credential\nManifest\nService" as Manifest
participant "Presentation\nExchange" as PEx
participant "Issuer\nServer" as Issuer
participant "Credential\nStore" as Store
database "Cache" as Cache

== 1. Discover Credential Offer ==
User -> UI: Scan QR / Open deep link
activate UI
UI -> Issuer: GET /credential-offer
activate Issuer
Issuer --> UI: Credential Offer
deactivate Issuer

note right of UI
Credential Offer contains:
• credential_issuer URL
• credentials array
• grants (pre-auth/auth code)
end note

== 2. Fetch Credential Manifest ==
UI -> Manifest: fetchManifest(issuerURL)
activate Manifest
Manifest -> Issuer: GET /.well-known/openid-credential-issuer
activate Issuer
Issuer --> Manifest: Issuer Metadata
deactivate Issuer

note right of Manifest
Issuer Metadata contains:
• credential_endpoint
• credential_manifests_supported
• credential_configurations_supported
end note

Manifest -> Issuer: GET /credential-manifest/{id}
activate Issuer
Issuer --> Manifest: Credential Manifest
deactivate Issuer

note right of Manifest
Credential Manifest structure:
{
  "id": "manifest-id",
  "issuer": {...},
  "output_descriptors": [...],
  "presentation_definition": {...}
}
end note

Manifest -> Cache: cacheManifest(manifest)
activate Cache
Cache --> Manifest: cached
deactivate Cache

== 3. Parse Output Descriptors ==
Manifest -> Manifest: parseOutputDescriptors()
note right of Manifest
Output Descriptor defines:
• id
• schema (credential type)
• display (title, subtitle, description)
• styles (optional)
end note

== 4. Check Presentation Requirements ==
alt Has presentation_definition
    Manifest -> PEx: evaluatePresentationDefinition(def)
    activate PEx
    PEx -> Store: findMatchingCredentials()
    activate Store
    Store --> PEx: matching credentials
    deactivate Store
    
    PEx --> Manifest: presentation required
    deactivate PEx
    
    Manifest --> UI: Show required credentials
    UI -> User: "Please provide these credentials"
    User --> UI: Select credentials
    
    UI -> PEx: createPresentationSubmission(credentials)
    activate PEx
    PEx --> UI: presentation_submission
    deactivate PEx
else No presentation required
    Manifest --> UI: No presentation needed
end

== 5. Generate Credential Application ==
UI -> Manifest: createApplication(manifest, presentation)
activate Manifest

Manifest -> Manifest: generateApplication()
note right of Manifest
Credential Application structure:
{
  "credential_application": {
    "id": "application-id",
    "manifest_id": "manifest-id",
    "format": "jwt_vc_json",
    "presentation_submission": {...}
  }
}
end note

Manifest --> UI: credential_application
deactivate Manifest

== 6. Request Credential ==
UI -> Issuer: POST /credential\n+ credential_application\n+ proof of possession
activate Issuer

Issuer -> Issuer: Validate application
Issuer -> Issuer: Verify presentation (if required)
Issuer -> Issuer: Issue credential

note right of Issuer
Credential Response structure:
{
  "format": "jwt_vc_json",
  "credential": "eyJhbG...",
  "c_nonce": "...",
  "c_nonce_expires_in": 86400
}
end note

Issuer --> UI: Credential Response
deactivate Issuer

== 7. Handle Credential Response ==
UI -> Manifest: handleCredentialResponse(response, manifest)
activate Manifest

Manifest -> Manifest: parseCredential(response)
Manifest -> Manifest: validateCredential()
Manifest -> Manifest: matchToOutputDescriptor()

note right of Manifest
Validation checks:
• Signature verification
• Issuer DID verification
• Expiration check
• Schema validation
• Output descriptor match
end note

alt Validation successful
    Manifest -> Store: saveCredential(credential, metadata)
    activate Store
    Store --> Manifest: saved
    deactivate Store
    
    Manifest --> UI: Success + credential
    UI -> User: "✅ Credential received!"
else Validation failed
    Manifest --> UI: Error details
    UI -> User: "❌ Credential invalid"
end

deactivate Manifest

== 8. Store Manifest Metadata ==
UI -> Store: updateCredentialMetadata(credentialId, manifest)
activate Store

note right of Store
Store manifest info for rendering:
• manifest_id
• output_descriptor_id
• display metadata
• issuer info
end note

Store --> UI: updated
deactivate Store

deactivate UI

@enduml
