@startuml
title Complete Credential Lifecycle (Sprint 2)
caption From Issuance to Deletion - Complete Management Flow

actor User
participant "Wallet UI" as UI
participant "Credential\nManagement" as CredMgmt
participant "Category\nService" as Cat
participant "Search\nService" as Search
participant "Activity\nLogger" as Activity
participant "Export\nService" as Export
database "Credential\nStore" as Store

== Phase 1: Credential Issuance ==
User -> UI: Receive credential offer
UI -> CredMgmt: issueCredential(offer)
activate CredMgmt

CredMgmt -> CredMgmt: fetchManifest()
CredMgmt -> CredMgmt: applyOCA()
CredMgmt -> Store: saveCredential(credential)
activate Store
Store --> CredMgmt: saved (id)
deactivate Store

CredMgmt -> Activity: logActivity(ISSUED, credentialId)
activate Activity
Activity --> CredMgmt: logged
deactivate Activity

CredMgmt -> Cat: autoAssignCategory(credential)
activate Cat
Cat -> Cat: detectCredentialType()
Cat -> Cat: assignToCategory()
Cat --> CredMgmt: categorized
deactivate Cat

CredMgmt --> UI: Success
UI --> User: ✅ "Credential received!"
deactivate CredMgmt

note right of CredMgmt
Initial state:
• Status: ACTIVE
• Category: Auto-assigned
• Favorite: false
• Presentation count: 0
end note

== Phase 2: Organization & Management ==

group Categorization (US-2.5)
    User -> UI: Organize credentials
    UI -> Cat: getUserCategories()
    activate Cat
    Cat --> UI: categories list
    
    User -> UI: Move to custom category
    UI -> Cat: assignCategory(credId, categoryId)
    Cat -> Store: updateCategory(credId, categoryId)
    activate Store
    Store --> Cat: updated
    deactivate Store
    Cat --> UI: Success
    deactivate Cat
    
    UI --> User: "Moved to category"
end

group Search & Filter (US-2.6)
    User -> UI: Search "university degree"
    UI -> Search: search(query, filters)
    activate Search
    
    Search -> Store: getAllCredentials()
    activate Store
    Store --> Search: credentials
    deactivate Store
    
    Search -> Search: buildSearchIndex()
    Search -> Search: fuzzySearch(query)
    Search -> Search: applyFilters(type, issuer, status)
    
    note right of Search
    Search operations:
    • Full-text fuzzy search (Fuse.js)
    • Filter by type
    • Filter by issuer
    • Filter by status (active/expired/revoked)
    • Filter by date range
    • Sort by date/name/issuer
    end note
    
    Search --> UI: filtered results
    deactivate Search
    
    UI --> User: Display matching credentials
end

group Favorites (US-2.9)
    User -> UI: ⭐ Mark as favorite
    UI -> Store: toggleFavorite(credentialId)
    activate Store
    Store --> UI: updated
    deactivate Store
    
    UI -> Activity: logActivity(FAVORITED, credentialId)
    activate Activity
    Activity --> UI: logged
    deactivate Activity
    
    UI --> User: "Added to favorites"
end

== Phase 3: Viewing & Details ==

group Detail View (US-2.7)
    User -> UI: Tap credential card
    UI -> CredMgmt: getCredentialDetails(credentialId)
    activate CredMgmt
    
    CredMgmt -> Store: loadCredential(credentialId)
    activate Store
    Store --> CredMgmt: credential data
    deactivate Store
    
    CredMgmt -> CredMgmt: applyOCA()
    CredMgmt -> CredMgmt: checkRevocationStatus()
    CredMgmt -> CredMgmt: checkExpiration()
    
    note right of CredMgmt
    Detail view includes:
    • All attributes (formatted)
    • Issuer information
    • Issuance date
    • Expiry date (if applicable)
    • Revocation status
    • Credential schema
    • Activity history
    • Available actions
    end note
    
    CredMgmt -> Activity: getActivityLog(credentialId)
    activate Activity
    Activity --> CredMgmt: activity history
    deactivate Activity
    
    CredMgmt --> UI: detailed credential
    deactivate CredMgmt
    
    UI --> User: Show detail view
end

== Phase 4: Presentation ==

group Present Credential
    User -> UI: Share credential
    UI -> CredMgmt: preparePresentation(credentialId, requirements)
    activate CredMgmt
    
    CredMgmt -> CredMgmt: selectiveDisclosure()
    CredMgmt -> CredMgmt: createVerifiablePresentation()
    
    CredMgmt --> UI: presentation ready
    deactivate CredMgmt
    
    UI -> User: Confirm disclosure
    User --> UI: Approve
    
    UI -> CredMgmt: submitPresentation()
    activate CredMgmt
    
    CredMgmt -> Activity: logActivity(PRESENTED, credentialId, verifierInfo)
    activate Activity
    Activity --> CredMgmt: logged
    deactivate Activity
    
    CredMgmt -> Store: incrementPresentationCount(credentialId)
    activate Store
    Store --> CredMgmt: updated
    deactivate Store
    
    CredMgmt --> UI: presentation sent
    deactivate CredMgmt
    
    UI --> User: ✅ "Credential shared"
end

== Phase 5: Export & Share ==

group Export/Share (US-2.8)
    User -> UI: Export credential
    UI -> User: Choose format
    User --> UI: Select "PDF"
    
    UI -> Export: exportToPDF(credential, options)
    activate Export
    
    Export -> Export: applyOCA styling
    Export -> Export: generatePDF()
    Export -> Export: addQRCode()
    Export -> Export: addIssuerInfo()
    
    note right of Export
    Export formats:
    1. JSON - Raw credential data
    2. QR Code - For quick sharing
    3. PDF - Professional presentation
    4. DIDComm - Secure P2P transfer
    5. Native share - OS share sheet
    end note
    
    Export --> UI: PDF file path
    deactivate Export
    
    UI -> UI: openShareSheet(filePath)
    
    UI --> User: Share via apps
    
    User -> UI: Share via email
    
    UI -> Activity: logActivity(EXPORTED, credentialId, format="PDF")
    activate Activity
    Activity --> UI: logged
    deactivate Activity
end

== Phase 6: Activity History ==

group View History (US-2.10)
    User -> UI: View credential activity
    UI -> Activity: getActivityHistory(credentialId)
    activate Activity
    
    Activity -> Activity: getTimeline()
    
    note right of Activity
    Activity types logged:
    • ISSUED - Initial issuance
    • VIEWED - Detail view opened
    • PRESENTED - Shared with verifier
    • EXPORTED - Exported to file
    • FAVORITED - Marked as favorite
    • CATEGORIZED - Category changed
    • UPDATED - Credential updated
    • REVOKED - Revocation detected
    end note
    
    Activity --> UI: timeline events
    deactivate Activity
    
    UI --> User: Show activity timeline
end

== Phase 7: Status Changes ==

group Revocation Detection
    CredMgmt -> CredMgmt: periodicStatusCheck()
    activate CredMgmt
    
    CredMgmt -> CredMgmt: checkRevocationList()
    
    alt Credential revoked
        CredMgmt -> Store: updateStatus(credentialId, REVOKED)
        activate Store
        Store --> CredMgmt: updated
        deactivate Store
        
        CredMgmt -> Activity: logActivity(REVOKED, credentialId)
        activate Activity
        Activity --> CredMgmt: logged
        deactivate Activity
        
        CredMgmt -> UI: notifyRevocation()
        UI --> User: 🚨 "Credential revoked"
    end
    deactivate CredMgmt
end

group Expiration Detection
    CredMgmt -> CredMgmt: checkExpiration()
    activate CredMgmt
    
    alt Credential expired
        CredMgmt -> Store: updateStatus(credentialId, EXPIRED)
        activate Store
        Store --> CredMgmt: updated
        deactivate Store
        
        CredMgmt -> Activity: logActivity(EXPIRED, credentialId)
        activate Activity
        Activity --> CredMgmt: logged
        deactivate Activity
        
        CredMgmt -> UI: notifyExpiration()
        UI --> User: ⏰ "Credential expired"
    end
    deactivate CredMgmt
end

== Phase 8: Deletion ==

group Delete Credential
    User -> UI: Delete credential
    UI -> User: Confirm deletion
    User --> UI: Confirm
    
    UI -> CredMgmt: deleteCredential(credentialId)
    activate CredMgmt
    
    CredMgmt -> Activity: logActivity(DELETED, credentialId)
    activate Activity
    Activity --> CredMgmt: logged
    deactivate Activity
    
    CredMgmt -> Store: archiveCredential(credentialId)
    activate Store
    
    note right of Store
    Soft delete:
    • Mark as deleted
    • Keep for audit trail
    • Hide from UI
    • Can be restored within 30 days
    end note
    
    Store --> CredMgmt: archived
    deactivate Store
    
    CredMgmt --> UI: deleted
    deactivate CredMgmt
    
    UI --> User: ✅ "Credential deleted"
end

note over User, Store
**Complete Lifecycle States:**
• PENDING - Being issued
• ACTIVE - Normal state
• EXPIRED - Past expiration date
• REVOKED - Revoked by issuer
• SUSPENDED - Temporarily inactive
• ARCHIVED - Soft deleted
• DELETED - Permanently removed (after 30 days)
end note

@enduml
